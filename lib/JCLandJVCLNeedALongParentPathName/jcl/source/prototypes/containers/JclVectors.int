(*$JPPDEFINEMACRO JCLVECTORINT(SELFCLASSNAME, ANCESTORCLASSNAME, COLLECTIONINTERFACENAME, LISTINTERFACENAME, ARRAYINTERFACENAME, ITRINTERFACENAME,
  INTERFACEADDITIONAL, SECTIONADDITIONAL, COLLECTIONFLAGS, OWNERSHIPDECLARATION,
  CONSTKEYWORD, PARAMETERNAME, TYPENAME, DEFAULTVALUE, DYNARRAYTYPE, GETTERNAME, SETTERNAME)
  SELFCLASSNAME = class(ANCESTORCLASSNAME, {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE}
    IJclIntfCloneable, IJclCloneable, IJclPackable, IJclGrowable, IJclContainer,INTERFACEADDITIONAL
    COLLECTIONINTERFACENAME, LISTINTERFACENAME, ARRAYINTERFACENAME)SECTIONADDITIONAL
  private
    FItems: DYNARRAYTYPE;
  protected
    procedure AssignDataTo(Dest: TJclAbstractContainerBase); override;
    // fix ambiguous warnings when compiled on Delphi.net and earlier versions of Delphi.win32
    // complaining about possible unaffected result.
    function RaiseOutOfBoundsError: TYPENAME;
  public
    constructor Create(ACapacity: IntegerOWNERSHIPDECLARATION); overload;
    constructor Create(const ACollection: COLLECTIONINTERFACENAMEOWNERSHIPDECLARATION); overload;
    destructor Destroy; override;
    property Items: DYNARRAYTYPE read FItems;
    { IJclPackable }
    procedure SetCapacity(Value: Integer); override;
    { COLLECTIONINTERFACENAME }
    function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
    function AddAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    procedure Clear;COLLECTIONFLAGS
    function CollectionEquals(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    function Contains(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
    function ContainsAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    function Extract(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean; COLLECTIONFLAGS
    function ExtractAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    function First: ITRINTERFACENAME;COLLECTIONFLAGS
    function IsEmpty: Boolean;COLLECTIONFLAGS
    function Last: ITRINTERFACENAME;COLLECTIONFLAGS
    function Remove(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean; COLLECTIONFLAGS
    function RemoveAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    function RetainAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    function Size: Integer;COLLECTIONFLAGS
    {$IFDEF SUPPORTS_FOR_IN}
    function GetEnumerator: ITRINTERFACENAME;COLLECTIONFLAGS
    {$ENDIF SUPPORTS_FOR_IN}
    { LISTINTERFACENAME }
    function Delete(Index: Integer): TYPENAME;
    function ExtractIndex(Index: Integer): TYPENAME;
    function GETTERNAME(Index: Integer): TYPENAME;
    function IndexOf(CONSTKEYWORDPARAMETERNAME: TYPENAME): Integer;
    function Insert(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
    function InsertAll(Index: Integer; const ACollection: COLLECTIONINTERFACENAME): Boolean;
    function LastIndexOf(CONSTKEYWORDPARAMETERNAME: TYPENAME): Integer;
    procedure SETTERNAME(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME);
    function SubList(First, Count: Integer): LISTINTERFACENAME;
  end;*)
(*$JPPDEFINEMACRO JCLVECTORITRINT(SELFCLASSNAME, ITRINTERFACENAME, LISTINTERFACENAME,
  CONSTKEYWORD, PARAMETERNAME, TYPENAME, GETTERNAME, SETTERNAME)
  SELFCLASSNAME = class(TJclAbstractIterator, ITRINTERFACENAME, {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE}
    IJclIntfCloneable, IJclCloneable)
  private
    FCursor: Integer;
    FStart: TItrStart;
    FOwnList: LISTINTERFACENAME;
  protected
    function CreateEmptyIterator: TJclAbstractIterator; override;
    procedure AssignPropertiesTo(Dest: TJclAbstractIterator); override;
  public
    constructor Create(const AOwnList: LISTINTERFACENAME; ACursor: Integer; AValid: Boolean; AStart: TItrStart);
    { ITRINTERFACENAME }
    function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
    procedure Extract;
    function GETTERNAME: TYPENAME;
    function HasNext: Boolean;
    function HasPrevious: Boolean;
    function Insert(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
    function IteratorEquals(const AIterator: ITRINTERFACENAME): Boolean;
    function Next: TYPENAME;
    function NextIndex: Integer;
    function Previous: TYPENAME;
    function PreviousIndex: Integer;
    procedure Remove;
    procedure Reset;
    procedure SETTERNAME(CONSTKEYWORDPARAMETERNAME: TYPENAME);
    {$IFDEF SUPPORTS_FOR_IN}
    function MoveNext: Boolean;
    property Current: TYPENAME read GETTERNAME;
    {$ENDIF SUPPORTS_FOR_IN}
  end;*)
